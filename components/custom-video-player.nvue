<template>
	<view class="video-container">
		<video ref="nVideo" class="video-player" :src="videoUrl" :poster="coverUrl" :controls="showControls"
			:enable-progress-gesture="true" :show-loading="true" :show-center-play-btn="showCenterBtn"
			:auto-focus="false" :loop="false" :muted="muted" :page-gesture="true" :initial-time="initialTime"
			:direction="0" object-fit="contain" @play="handlePlay" @pause="handlePause" @ended="handleEnded"
			@timeupdate="handleTimeUpdate" @error="handleError" @waiting="handleWaiting" @progress="handleProgress"
			@loadedmetadata="handleMetaData"></video>

		<!-- 自定义控制层 - 当showControls为false时使用 -->
		<view v-if="!showControls" class="custom-controls" :style="{ opacity: controlsVisible ? 1 : 0 }">
			<!-- 播放/暂停按钮 -->
			<view class="play-btn" @click="togglePlay">
				<text class="icon">{{ isPlaying ? '❚❚' : '▶' }}</text>
			</view>

			<!-- 进度条 -->
			<view class="progress-bar" @click="onProgressBarClick">
				<view class="progress-background"></view>
				<view class="progress-current" :style="{ width: `${progress}%` }"></view>
				<view class="progress-handle" :style="{ left: `${progress}%` }"></view>
			</view>

			<!-- 时间显示 -->
			<view class="time-display">
				<text class="time-text">{{ formatTime(currentTime) }} / {{ formatTime(duration) }}</text>
			</view>

			<!-- 全屏按钮 -->
			<view class="fullscreen-btn" @click="toggleFullscreen">
				<text class="icon">{{ isFullscreen ? '↙' : '↗' }}</text>
			</view>
		</view>
	</view>
</template>

<script>
	export default {
		props: {
			videoUrl: {
				type: String,
				required: true
			},
			coverUrl: {
				type: String,
				default: ''
			},
			showControls: {
				type: Boolean,
				default: true
			},
			showCenterBtn: {
				type: Boolean,
				default: true
			},
			autoplay: {
				type: Boolean,
				default: false
			},
			muted: {
				type: Boolean,
				default: false
			},
			initialTime: {
				type: Number,
				default: 0
			}
		},
		data() {
			return {
				isPlaying: false,
				duration: 0,
				currentTime: 0,
				progress: 0, // 0-100的进度百分比
				controlsVisible: false,
				controlsTimer: null,
				isFullscreen: false
			};
		},
		mounted() {
			// 获取视频元素引用
			this.videoCtx = uni.createVideoContext('nVideo', this);

			// 如果设置了自动播放
			if (this.autoplay) {
				setTimeout(() => {
					this.play();
				}, 300);
			}

			// 监听点击事件，用于显示/隐藏控制栏
			if (!this.showControls) {
				this.$nextTick(() => {
					const videoEl = this.$refs.nVideo;
					if (videoEl) {
						videoEl.addEventListener('click', this.toggleControls);
					}
				});
			}
		},
		beforeDestroy() {
			// 清除定时器
			if (this.controlsTimer) {
				clearTimeout(this.controlsTimer);
			}

			// 移除事件监听
			if (!this.showControls) {
				const videoEl = this.$refs.nVideo;
				if (videoEl) {
					videoEl.removeEventListener('click', this.toggleControls);
				}
			}
		},
		methods: {
			// 播放控制
			play() {
				this.videoCtx.play();
				this.isPlaying = true;
				this.$emit('play');
			},
			pause() {
				this.videoCtx.pause();
				this.isPlaying = false;
				this.$emit('pause');
			},
			togglePlay() {
				if (this.isPlaying) {
					this.pause();
				} else {
					this.play();
				}
			},

			// 控制栏显示/隐藏
			toggleControls() {
				this.controlsVisible = !this.controlsVisible;

				// 如果显示控制栏，则设置自动隐藏定时器
				if (this.controlsVisible) {
					this.startHideControlsTimer();
				} else if (this.controlsTimer) {
					clearTimeout(this.controlsTimer);
				}
			},
			startHideControlsTimer() {
				if (this.controlsTimer) {
					clearTimeout(this.controlsTimer);
				}

				this.controlsTimer = setTimeout(() => {
					this.controlsVisible = false;
				}, 3000); // 3秒后自动隐藏
			},

			// 全屏切换
			toggleFullscreen() {
				if (this.isFullscreen) {
					this.videoCtx.exitFullScreen();
				} else {
					this.videoCtx.requestFullScreen();
				}
				this.isFullscreen = !this.isFullscreen;
			},

			// 进度条点击
			onProgressBarClick(event) {
				// 获取点击位置的百分比
				const touch = event.touches[0];
				const progressBar = event.target;

				// 获取进度条的位置和宽度
				const query = uni.createSelectorQuery().in(this);
				query.select('.progress-bar').boundingClientRect(data => {
					if (data) {
						const percent = (touch.clientX - data.left) / data.width * 100;
						const seekTime = this.duration * (percent / 100);

						// 设置播放进度
						this.videoCtx.seek(seekTime);
						this.progress = percent;
					}
				}).exec();
			},

			// 事件处理程序
			handlePlay() {
				this.isPlaying = true;
				this.$emit('play');
			},
			handlePause() {
				this.isPlaying = false;
				this.$emit('pause');
			},
			handleEnded() {
				this.isPlaying = false;
				this.$emit('ended');
			},
			handleTimeUpdate(e) {
				this.currentTime = e.detail.currentTime;
				this.duration = e.detail.duration || this.duration;

				// 计算进度百分比
				if (this.duration > 0) {
					this.progress = (this.currentTime / this.duration) * 100;
				}

				this.$emit('timeupdate', e);
			},
			handleError(e) {
				this.$emit('error', e);
				console.error('视频播放错误:', e.detail);
			},
			handleWaiting() {
				this.$emit('waiting');
			},
			handleProgress() {
				this.$emit('progress');
			},
			handleMetaData(e) {
				this.duration = e.detail.duration;
				this.$emit('loadedmetadata', e);
			},

			// 工具函数
			formatTime(seconds) {
				if (isNaN(seconds) || seconds < 0) return '00:00';

				const minutes = Math.floor(seconds / 60);
				seconds = Math.floor(seconds % 60);

				return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
			},

			// 公共方法
			getCurrentTime() {
				return this.currentTime;
			},
			getDuration() {
				return this.duration;
			}
		}
	}
</script>

<style>
	.video-container {
		position: relative;
		width: 750rpx;
		height: 421rpx;
		/* 16:9比例 */
		background-color: #000;
	}

	.video-player {
		width: 750rpx;
		height: 421rpx;
	}

	/* 自定义控制层 */
	.custom-controls {
		position: absolute;
		left: 0;
		right: 0;
		bottom: 0;
		height: 80rpx;
		background: linear-gradient(to top, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0));
		display: flex;
		align-items: center;
		padding: 0 20rpx;
		transition: opacity 0.3s;
	}

	.play-btn {
		width: 60rpx;
		height: 60rpx;
		display: flex;
		justify-content: center;
		align-items: center;
	}

	.icon {
		color: #fff;
		font-size: 40rpx;
	}

	.progress-bar {
		flex: 1;
		height: 10rpx;
		position: relative;
		margin: 0 20rpx;
	}

	.progress-background {
		position: absolute;
		left: 0;
		top: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(255, 255, 255, 0.3);
		border-radius: 5rpx;
	}

	.progress-current {
		position: absolute;
		left: 0;
		top: 0;
		height: 100%;
		background-color: #ff9000;
		border-radius: 5rpx;
	}

	.progress-handle {
		position: absolute;
		top: 50%;
		transform: translate(-50%, -50%);
		width: 20rpx;
		height: 20rpx;
		background-color: #ff9000;
		border-radius: 50%;
	}

	.time-display {
		width: 120rpx;
		text-align: center;
	}

	.time-text {
		color: #fff;
		font-size: 24rpx;
	}

	.fullscreen-btn {
		width: 60rpx;
		height: 60rpx;
		display: flex;
		justify-content: center;
		align-items: center;
	}
</style>